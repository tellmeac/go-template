// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/tellmeac/go-template/internal/infrastructure/ent/templates"
)

// Templates is the model entity for the Templates schema.
type Templates struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Template holds the value of the "template" field.
	Template string `json:"template,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Templates) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case templates.FieldID:
			values[i] = new(sql.NullInt64)
		case templates.FieldName, templates.FieldTemplate:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Templates", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Templates fields.
func (t *Templates) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case templates.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case templates.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case templates.FieldTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template", values[i])
			} else if value.Valid {
				t.Template = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Templates.
// Note that you need to call Templates.Unwrap() before calling this method if this Templates
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Templates) Update() *TemplatesUpdateOne {
	return (&TemplatesClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Templates entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Templates) Unwrap() *Templates {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Templates is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Templates) String() string {
	var builder strings.Builder
	builder.WriteString("Templates(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("template=")
	builder.WriteString(t.Template)
	builder.WriteByte(')')
	return builder.String()
}

// TemplatesSlice is a parsable slice of Templates.
type TemplatesSlice []*Templates

func (t TemplatesSlice) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
