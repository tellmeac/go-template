// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tellmeac/go-template/internal/infrastructure/ent/templates"
)

// TemplatesCreate is the builder for creating a Templates entity.
type TemplatesCreate struct {
	config
	mutation *TemplatesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TemplatesCreate) SetName(s string) *TemplatesCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetTemplate sets the "template" field.
func (tc *TemplatesCreate) SetTemplate(s string) *TemplatesCreate {
	tc.mutation.SetTemplate(s)
	return tc
}

// Mutation returns the TemplatesMutation object of the builder.
func (tc *TemplatesCreate) Mutation() *TemplatesMutation {
	return tc.mutation
}

// Save creates the Templates in the database.
func (tc *TemplatesCreate) Save(ctx context.Context) (*Templates, error) {
	var (
		err  error
		node *Templates
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplatesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Templates)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TemplatesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TemplatesCreate) SaveX(ctx context.Context) *Templates {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TemplatesCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TemplatesCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TemplatesCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Templates.name"`)}
	}
	if _, ok := tc.mutation.Template(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required field "Templates.template"`)}
	}
	return nil
}

func (tc *TemplatesCreate) sqlSave(ctx context.Context) (*Templates, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TemplatesCreate) createSpec() (*Templates, *sqlgraph.CreateSpec) {
	var (
		_node = &Templates{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: templates.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: templates.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templates.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Template(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templates.FieldTemplate,
		})
		_node.Template = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Templates.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplatesUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TemplatesCreate) OnConflict(opts ...sql.ConflictOption) *TemplatesUpsertOne {
	tc.conflict = opts
	return &TemplatesUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Templates.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TemplatesCreate) OnConflictColumns(columns ...string) *TemplatesUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TemplatesUpsertOne{
		create: tc,
	}
}

type (
	// TemplatesUpsertOne is the builder for "upsert"-ing
	//  one Templates node.
	TemplatesUpsertOne struct {
		create *TemplatesCreate
	}

	// TemplatesUpsert is the "OnConflict" setter.
	TemplatesUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TemplatesUpsert) SetName(v string) *TemplatesUpsert {
	u.Set(templates.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplatesUpsert) UpdateName() *TemplatesUpsert {
	u.SetExcluded(templates.FieldName)
	return u
}

// SetTemplate sets the "template" field.
func (u *TemplatesUpsert) SetTemplate(v string) *TemplatesUpsert {
	u.Set(templates.FieldTemplate, v)
	return u
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *TemplatesUpsert) UpdateTemplate() *TemplatesUpsert {
	u.SetExcluded(templates.FieldTemplate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Templates.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TemplatesUpsertOne) UpdateNewValues() *TemplatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Templates.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TemplatesUpsertOne) Ignore() *TemplatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplatesUpsertOne) DoNothing() *TemplatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplatesCreate.OnConflict
// documentation for more info.
func (u *TemplatesUpsertOne) Update(set func(*TemplatesUpsert)) *TemplatesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplatesUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TemplatesUpsertOne) SetName(v string) *TemplatesUpsertOne {
	return u.Update(func(s *TemplatesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplatesUpsertOne) UpdateName() *TemplatesUpsertOne {
	return u.Update(func(s *TemplatesUpsert) {
		s.UpdateName()
	})
}

// SetTemplate sets the "template" field.
func (u *TemplatesUpsertOne) SetTemplate(v string) *TemplatesUpsertOne {
	return u.Update(func(s *TemplatesUpsert) {
		s.SetTemplate(v)
	})
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *TemplatesUpsertOne) UpdateTemplate() *TemplatesUpsertOne {
	return u.Update(func(s *TemplatesUpsert) {
		s.UpdateTemplate()
	})
}

// Exec executes the query.
func (u *TemplatesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemplatesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplatesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TemplatesUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TemplatesUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TemplatesCreateBulk is the builder for creating many Templates entities in bulk.
type TemplatesCreateBulk struct {
	config
	builders []*TemplatesCreate
	conflict []sql.ConflictOption
}

// Save creates the Templates entities in the database.
func (tcb *TemplatesCreateBulk) Save(ctx context.Context) ([]*Templates, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Templates, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplatesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TemplatesCreateBulk) SaveX(ctx context.Context) []*Templates {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TemplatesCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TemplatesCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Templates.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplatesUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TemplatesCreateBulk) OnConflict(opts ...sql.ConflictOption) *TemplatesUpsertBulk {
	tcb.conflict = opts
	return &TemplatesUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Templates.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TemplatesCreateBulk) OnConflictColumns(columns ...string) *TemplatesUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TemplatesUpsertBulk{
		create: tcb,
	}
}

// TemplatesUpsertBulk is the builder for "upsert"-ing
// a bulk of Templates nodes.
type TemplatesUpsertBulk struct {
	create *TemplatesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Templates.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TemplatesUpsertBulk) UpdateNewValues() *TemplatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Templates.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TemplatesUpsertBulk) Ignore() *TemplatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplatesUpsertBulk) DoNothing() *TemplatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplatesCreateBulk.OnConflict
// documentation for more info.
func (u *TemplatesUpsertBulk) Update(set func(*TemplatesUpsert)) *TemplatesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplatesUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TemplatesUpsertBulk) SetName(v string) *TemplatesUpsertBulk {
	return u.Update(func(s *TemplatesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplatesUpsertBulk) UpdateName() *TemplatesUpsertBulk {
	return u.Update(func(s *TemplatesUpsert) {
		s.UpdateName()
	})
}

// SetTemplate sets the "template" field.
func (u *TemplatesUpsertBulk) SetTemplate(v string) *TemplatesUpsertBulk {
	return u.Update(func(s *TemplatesUpsert) {
		s.SetTemplate(v)
	})
}

// UpdateTemplate sets the "template" field to the value that was provided on create.
func (u *TemplatesUpsertBulk) UpdateTemplate() *TemplatesUpsertBulk {
	return u.Update(func(s *TemplatesUpsert) {
		s.UpdateTemplate()
	})
}

// Exec executes the query.
func (u *TemplatesUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TemplatesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemplatesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplatesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
